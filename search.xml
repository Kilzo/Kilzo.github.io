<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Codeforces题目集爬取，包括是否AC</title>
      <link href="/post/a1cb4181/"/>
      <url>/post/a1cb4181/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h1 id="Codeforces题目集爬取，包括是否AC"><a href="#Codeforces题目集爬取，包括是否AC" class="headerlink" title="Codeforces题目集爬取，包括是否AC"></a>Codeforces题目集爬取，包括是否AC</h1><p>这几天本来想从网上找个$Codeforces$入门题单，但是没找到好吧23333…..在搜索的过程中，我发现有人写了爬取$Codeforces$题单的爬虫，处于好奇和对Python初步了解的情况下点进去看了。发现居然是好几年前写的爬虫……直接当场去世。可是，既然发现了，而且有点感兴趣，我就入坑改爬虫了。</p><p>本校大佬(当然是本校公认的，可能在各位佬眼中是垃圾)的指引下，我认识了BS4(<a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc.zh/">Beautiful Soup 4</a>),他说这个是用来爬虫的，我的pycharm装了果然能跑动了。但是输出为空。然后大佬又改又跑了1个小时，最后没搞懂问题出在哪。跑路了……</p><p>后来我才发现是我下载的版本太远古了，发现作者的Github上有个17年更新的，于是果断download下来跑了。</p><p>结果当然是跑动了但完全没跑动。题单是出来了，但是每一题AC情况没有。于是乎，我开始了罪恶的改bug。</p><p>我仔细<code>debug</code>他的做法，发现错误出在了<code>codeforces[id][title]</code>中的<code>id</code>，题目集爬出来的<code>id</code>是<code>数字+字母</code>,然而在目标的<code>submission</code>中爬取的<code>id</code>却是字母题号。2333333….看来是网站更新了，html改了……</p><p>于是乎，经过上次本校大佬介绍的BS4,我开始搜罗各种各样的改法。这里就用上了暑假学会的改透明度时候用的F12控制台搜索。一遍一遍仔细读了代码。table,下的td，tr，a,最后锁定第一版应该用<code>tittle</code>做<code>id</code>这样就理论上能成功了。于是我先这样后那样就成功了。</p><img src="/post/a1cb4181/image-20211016003923381.png" alt="image-20211016003923381" style="zoom:200%;" loading="lazy"><img src="/post/a1cb4181/image-20211016004018478.png" alt="image-20211016004018478" style="zoom:200%;" loading="lazy"><p>大概修改就在这了。这里我魔改了两位爬取题单的前辈们的代码。一位是刚刚我找的那个原模板，一个是只爬取<code>submsssion</code>的大佬的模板，其中第二位大佬是通过题目名字<code>题号字母 + - + 题目名称</code>进行搜索的。还提供了Accepted的查找方式，都有现成的了！我马上就想到了两个模板合成在一起。后来我想了想，通过他的查找修改了原来ID的查找和对比。结果就是上图。由于第一版不如我心里想的意思，我就不多展开怎么改了。</p><h1 id="第一版完"><a href="#第一版完" class="headerlink" title="第一版完"></a>第一版完</h1><p>正在着手准备小改动并优化结构……</p>]]></content>
      
      
      <categories>
          
          <category> ACM算法竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Codeforces </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>笔记：快速幂</title>
      <link href="/post/3e329751/"/>
      <url>/post/3e329751/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="31909d7ef4f979be980b585f02fbbad5da71eee7752e0892ea3ab0167daac177"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要密码.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++算法笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于8月13号Git不再支持密码验证导致hexo无法更新的问题</title>
      <link href="/post/963cd05b/"/>
      <url>/post/963cd05b/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h1 id="关于8月13号Git不再支持密码验证导致hexo无法更新的问题"><a href="#关于8月13号Git不再支持密码验证导致hexo无法更新的问题" class="headerlink" title="关于8月13号Git不再支持密码验证导致hexo无法更新的问题"></a>关于8月13号Git不再支持密码验证导致hexo无法更新的问题</h1><p>问题如</p><img src="/post/963cd05b/1.png" loading="lazy"><p>本人昨天刚开始找了很久也没找到为啥，今天看了看这个发现了这个remote：,于是开始在网上查找解决方法，下面是我在Github官方目录上找到的解决办法。外加Git的设置。</p><h2 id="首先是打开你的Github，找到右上角头像点击，选择settings。"><a href="#首先是打开你的Github，找到右上角头像点击，选择settings。" class="headerlink" title="首先是打开你的Github，找到右上角头像点击，选择settings。"></a>首先是打开你的Github，找到右上角头像点击，选择settings。</h2><img src="/post/963cd05b/2.png" alt="image-20210815195839994" style="zoom:80%;" loading="lazy"><h2 id="点击红框框这个Developer-settings"><a href="#点击红框框这个Developer-settings" class="headerlink" title="点击红框框这个Developer settings"></a>点击红框框这个Developer settings</h2><img src="/post/963cd05b/3.png" alt="image-20210815195945687" loading="lazy"><h2 id="然后按照图中做"><a href="#然后按照图中做" class="headerlink" title="然后按照图中做"></a>然后按照图中做</h2><img src="/post/963cd05b/4.png" alt="image-20210815200147681" style="zoom: 150%;" loading="lazy"><img src="/post/963cd05b/5.png" alt="image-20210815200633002" style="zoom: 150%;" loading="lazy"><h2 id="最后复制token并记录在你信任的地方"><a href="#最后复制token并记录在你信任的地方" class="headerlink" title="最后复制token并记录在你信任的地方"></a>最后复制token并记录在你信任的地方</h2><img src="/post/963cd05b/6.png" alt="image-20210815200814560" style="zoom:150%;" loading="lazy"><p>然后我们开始设置Git</p><blockquote><p>这里提供的是不输入token不连续登陆，也就是永久记住密码和账号</p></blockquote><h2 id="Git的设置"><a href="#Git的设置" class="headerlink" title="Git的设置"></a>Git的设置</h2><p>首先重置密码和账号（对于已经保存过也就是永久登录的用户）</p><pre class="language-bash" data-language="bash"><code class="language-bash">git config --system --unset credential.helper</code></pre><p>然后我们执行</p><pre class="language-bash" data-language="bash"><code class="language-bash">git config --global credential.helper store &#x2F;&#x2F;记住账号密码</code></pre><p>后面就是三大指令：<code>hexo clean</code> <code>hexo g</code> <code>hexo d</code></p><p>这个时候会要求你输入账号和密码。</p><p>根据官方文档密码为你的<code>token</code>，账号是你的用户名。（由于我已经设置过，这里不贴图了）</p><p>贴个官方文档参考。</p><p><a href="https://docs.github.com/en/github/authenticating-to-github/keeping-your-account-and-data-secure/creating-a-personal-access-token">Creating a personal access token - GitHub Docs</a></p><p>接下来，你就可以正常提交了，除非超时。</p><h1 id="完"><a href="#完" class="headerlink" title="完"></a>完</h1>]]></content>
      
      
      <categories>
          
          <category> hexo, Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo, Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于学车</title>
      <link href="/post/5f4050a8/"/>
      <url>/post/5f4050a8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h1 id="关于学车"><a href="#关于学车" class="headerlink" title="关于学车"></a>关于学车</h1><p>暑假期间被迫学车，由于高考暑假没有去学车导致我现在被迫在学车，然后就最近更新的质量不太行，OJ的题也没有好好的刷，实在惭愧。最近希望能好好调整心态。就说这么多吧。好累啊~~。真希望早点开学。</p>]]></content>
      
      
      <categories>
          
          <category> 学车 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学车 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>yun主题的页面背景透明和左侧菜单栏透明修改</title>
      <link href="/post/cf1abab9/"/>
      <url>/post/cf1abab9/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><script>console.error("Error: [hexo-tag-aplayer] Unrecognized tag argument(2): autoplay=false");</script><blockquote><p>今天是本人少数肝博客更新肝一下午的一天，这个主题真的是简直毫无教程。全程自己摸索。不过也学到好多东西。</p><p>本文对所有主题（Hexo）生效的一点估计就在开头的控制台介绍了。</p></blockquote><p>在开始之前，我bing查询了一些大伙怎么修改文章透明，发现没一个对的上的，（其实我也没一个个试），偶然间看到了网页F12进入开发者模式（也就是大家俗称的控制台），在元素中可以看到每一个模块在哪个文件。更加坚定了自己手动修改的目的。于是乎，下面开始了。（这里是全透明，不含透明百分数，想要百分比透明的可以跳过了。)</p><blockquote><p>首先先说说像我这样的小白怎么整这个控制台。</p></blockquote><h1 id="首先打开你的博客-网站目录"><a href="#首先打开你的博客-网站目录" class="headerlink" title="首先打开你的博客/网站目录"></a>首先打开你的博客/网站目录</h1><p>在你的博客目录右键打开Git Bash Here,输入三连，<code>hexo clean</code> 、<code>hexo g</code>、 <code>hexo s</code>打开你的博客，然后键盘按F12进入控制台，当然你也可以在浏览器中找找控制台，具体打开方式可以百度，这里不多说。大概长这样：</p><img src="/post/cf1abab9/1.png" alt="1" loading="lazy"><p>然后我们打开元素面板，如上图最上面菜单栏所示</p><h1 id="接下来就可以根据这里面的代码定位你要修改的地方"><a href="#接下来就可以根据这里面的代码定位你要修改的地方" class="headerlink" title="接下来就可以根据这里面的代码定位你要修改的地方"></a>接下来就可以根据这里面的代码定位你要修改的地方</h1><img src="/post/cf1abab9/2.png" alt="2" loading="lazy"><p>如图中高亮区域</p><p>接下来一步步细化你所需要修改的区域</p><img src="/post/cf1abab9/3.png" alt="3" loading="lazy"><img src="/post/cf1abab9/4.png" alt="4" loading="lazy"><p>一直到你想要的区域不能再细分为止。我直接贴最终结果了</p><img src="/post/cf1abab9/5.png" alt="5" loading="lazy"><p>放大结果，得出如下结论</p><img src="/post/cf1abab9/6.png" alt="6" loading="lazy"><p>在这个post.styl文件中的post-block函数中，以下开始正式修改</p><hr><h1 id="首先是文章页面的透明"><a href="#首先是文章页面的透明" class="headerlink" title="首先是文章页面的透明"></a>首先是文章页面的透明</h1><p>打开你的博客目录中的<code>themes\yun\source\css\_layout</code>里面的post.styl文件，马上就能找到如下代码并修改：（按照下图修改）</p><pre class="language-stylus" data-language="stylus"><code class="language-stylus">.post &#123;  &amp;-block &#123;    color: var(--hty-text-color);    &#x2F;&#x2F;opacity: 0.4   &#x2F;&#x2F;文章背景透明度（总的，大bug）一般不用这个，用下面那个（这个是我自己加的）    margin: 0 1rem;    padding: 1rem;    &#x2F;&#x2F;background-color: var(--post-block-bg-color);   &#x2F;&#x2F;改这个透明    background-color: &quot;&quot;;&#x2F;&#x2F;这样就表示透明了，至于透明度，我还没发现怎么改，因为上面那个一改就基本字也是透明的了    +mobile() &#123;      margin: 0;      padding-top: 2.5rem;    &#125;  &#125;</code></pre><p>此时改完保存你可以三连看看本地效果如何。</p><h1 id="然后是左边菜单栏的修改"><a href="#然后是左边菜单栏的修改" class="headerlink" title="然后是左边菜单栏的修改"></a>然后是左边菜单栏的修改</h1><p>重复上述控制台步骤步骤找到你需要的文件，我这里是<code>themes\yun\source\css\_components\sidebar</code>中的sidebar.styl，同样，找到下述代码并修改:</p><pre class="language-stylus" data-language="stylus"><code class="language-stylus">.sidebar &#123;  position: fixed;  overflow-y: auto;  top: 0;  bottom: 0;  left: 0;  width: 20rem;  background-color: &#39;&#39;; &#x2F;&#x2F;左边栏透明  background-image: &#39;&#39;; &#x2F;&#x2F;这个是你插入的图片取消，当然也可以不插入图片，在你插入图片的文件中取消而不是在这&#x2F;&#x2F;background-image: url($sidebar-bg-image);  background-size: contain;  background-repeat: no-repeat;  background-position: convert($sidebar-bg-position);  text-align: center;  z-index: $sidebar-z-index;  the-transition();  the-box-shadow();  +mobile() &#123;    left: -20rem;    transform: translateX(0);  &#125;</code></pre><p>到目前为止，这里只是亮色主题下的左边菜单栏修改。由于作者大大的骚操作，他把暗色主题在设置时候重写了这个函数，我们需要到暗色主题下修改。我们到</p><p><code>\themes\yun\source\css\_global</code>下打开dark.styl。找到如下代码并修改：</p><pre class="language-stylus" data-language="stylus"><code class="language-stylus">&#x2F;&#x2F; sidebar$sidebar-bg-image &#x3D; hexo-config(&#39;sidebar.dark_bg_image&#39;);.sidebar &#123;  &#x2F;&#x2F;background-color: rgba($dark-primary-color, 0.95);   &#x2F;&#x2F;这里是被重写的结果，亮色改变要在_components中的sidebar中sidebar.styl  background-image:&#39;&#39;;&#x2F;&#x2F;同样的图片修改  if ($sidebar-bg-image) &#123;    background-image: url($sidebar-bg-image);  &#125; else &#123;    background-image: none;  &#125;&#125;</code></pre><h1 id="然后就是评论板块"><a href="#然后就是评论板块" class="headerlink" title="然后就是评论板块"></a>然后就是评论板块</h1><p>打开<code>themes\yun\source\css\_widget</code>中的comment.styl,找到并修改如下代码：</p><pre class="language-stylus" data-language="stylus"><code class="language-stylus">#comment &#123;  margin: 0 1rem;  padding: 1rem;  &#x2F;&#x2F;background-color: var(--post-block-bg-color);  background-color: &#39;&#39;;  &#x2F;&#x2F;评论板块透明  +mobile() &#123;    margin: 0;  &#125;&#125;</code></pre><h1 id="OK-三连看你的修改效果，大功告成"><a href="#OK-三连看你的修改效果，大功告成" class="headerlink" title="OK,三连看你的修改效果，大功告成"></a>OK,三连看你的修改效果，大功告成</h1>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于hexo yun主题(本主题)代码高亮问题的解决</title>
      <link href="/post/cbd6015b/"/>
      <url>/post/cbd6015b/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h1 id="关于hexo-yun主题-本主题-代码高亮问题的解决"><a href="#关于hexo-yun主题-本主题-代码高亮问题的解决" class="headerlink" title="关于hexo yun主题(本主题)代码高亮问题的解决"></a>关于hexo yun主题(本主题)代码高亮问题的解决</h1><blockquote><p>实际上也不能称作(<code>yun</code>主题)是本主题，只是利用了<code>yun</code>主题的模板，在这还是要感谢<a href="https://www.yunyoujun.cn/about/">云游君</a>(<code>yun</code>主题的作者)给我们提供了这么漂亮的主题</p><p>另外提一下，这里用的是prism，用highlight的可以关闭这个无用网页了。</p></blockquote><h2 id="1-禁用highlight"><a href="#1-禁用highlight" class="headerlink" title="1. 禁用highlight"></a>1. 禁用highlight</h2><p>打开根目录下的<code>_config.yml</code>文件，修改配置</p><pre class="language-bash" data-language="bash"><code class="language-bash">highlight:  enable: false···········</code></pre><h2 id="2-获取prism"><a href="#2-获取prism" class="headerlink" title="2. 获取prism"></a>2. 获取prism</h2><p>下载页面：<a href="https://links.jianshu.com/go?to=https://prismjs.com/download.html">https://prismjs.com/download.html</a>；选择你喜欢的 theme 主题、（想要支持的）language 支持的语言（不要选太多，够用就好）、plugin 插件（可以选Line Numbers、Copyto Clipboard Button，其他的看自己需求）；然后点击下载按钮就行了；下载到本地之后，将它们重命名为 <code>prism.js</code>、<code>prism.css</code>，然后将它们放置到 <code>/themes/next/source/js/prism/</code> 目录下（prism 文件夹需要自己新建），即它们的路径是：</p><pre class="language-bash" data-language="bash"><code class="language-bash">&#x2F;themes&#x2F;yun&#x2F;source&#x2F;js&#x2F;prism&#x2F;</code></pre><h2 id="3-配置-prism"><a href="#3-配置-prism" class="headerlink" title="3. 配置 prism"></a>3. 配置 prism</h2><ul><li>修改 <code>themes/next/layout/_partials/head.pug</code>，在尾部添加以下代码：</li></ul><pre class="language-js" data-language="js"><code class="language-js">&lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;&#x2F;js&#x2F;prism&#x2F;prism.css&quot;&gt;</code></pre><ul><li>修改 <code>themes/next/layout/_partials/footer.pug</code>，在尾部添加以下代码</li></ul><pre class="language-js" data-language="js"><code class="language-js">&lt;script src&#x3D;&quot;&#x2F;js&#x2F;prism&#x2F;prism.js&quot; async&gt;&lt;&#x2F;script&gt;</code></pre><h2 id="4-修改博客配置"><a href="#4-修改博客配置" class="headerlink" title="4. 修改博客配置"></a>4. 修改博客配置</h2><p>打开根目录下的<code>_config.yml</code>文件，添加下面代码</p><pre class="language-yml" data-language="yml"><code class="language-yml">marked:  langPrefix: line-numbers language-</code></pre><h2 id="4-测试prism"><a href="#4-测试prism" class="headerlink" title="4. 测试prism"></a>4. 测试prism</h2><p>清理后，重新运行直接测试</p><pre class="language-undefined" data-language="undefined"><code class="language-undefined">hexo cleanhexo ghexo s</code></pre>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用hexo-abbrlink解决版权本文链接有中文乱码问题</title>
      <link href="/post/3185eecb/"/>
      <url>/post/3185eecb/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h1 id="使用hexo-abbrlink解决版权本文链接有中文乱码问题"><a href="#使用hexo-abbrlink解决版权本文链接有中文乱码问题" class="headerlink" title="使用hexo-abbrlink解决版权本文链接有中文乱码问题"></a>使用hexo-abbrlink解决版权本文链接有中文乱码问题</h1><h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><pre class="language-C++" data-language="C++"><code class="language-C++">npm install hexo-abbrlink --save</code></pre><h2 id="配置站点配置文件-config-yml"><a href="#配置站点配置文件-config-yml" class="headerlink" title="配置站点配置文件_config.yml"></a>配置站点配置文件<code>_config.yml</code></h2><pre class="language-C++" data-language="C++"><code class="language-C++">permalink: post&#x2F;:abbrlink.html   #若是按照上一篇中搭建的图片显示功能，请将html去掉即可正常显示图片abbrlink:  alg: crc32  # 算法：crc16(default) and crc32  rep: hex    # 进制：dec(default) and hex</code></pre>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于搭建Hexo博客的初级教程</title>
      <link href="/post/816f8e7d/"/>
      <url>/post/816f8e7d/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h1 id="关于搭建Hexo博客的初级教程"><a href="#关于搭建Hexo博客的初级教程" class="headerlink" title="关于搭建Hexo博客的初级教程"></a>关于搭建Hexo博客的初级教程</h1><blockquote><p>主要是给不太熟练的自己未来某一天崩了重新做blog的教程（当然也会尽量让小白看懂）</p></blockquote><p>这里是通过使用<strong>GitHub</strong>托管搭建的<strong>Hexo</strong>博客。如果你想要自己的域名比如：<code>www.XXXXX.com</code>什么的需要前往阿里云或者腾讯云注册，当然，你有<strong>其他渠道</strong>也可以注册。这里仅以<strong>阿里云</strong>为例。或者，你暂时只是想玩一玩，那么可以利用GitHub提供的github.io网站。</p><hr><p><strong>注意</strong>：本篇幅使用的是next主题，想要看优化什么的可以关掉了（还有这是window的安装教程，不是mac）</p><hr><h2 id="首先是准备工作"><a href="#首先是准备工作" class="headerlink" title="首先是准备工作"></a>首先是准备工作</h2><p>Git 和 node.js</p><h2 id="下载Git"><a href="#下载Git" class="headerlink" title="下载Git"></a>下载Git</h2><p><a href="https://git-scm.com/">Git</a> </p><img src="/post/816f8e7d/Git.jpg" alt="Git" style="zoom: 67%;" loading="lazy"><p>首先进入Git官网下载符合你系统的版本。</p><p>下载完成后直接点击安装，想要更改安装位置就更改位置，由于都是干这行的，这里不多赘述。剩下默认安装就可以了。</p><h2 id="下载Node-js"><a href="#下载Node-js" class="headerlink" title="下载Node.js"></a>下载Node.js</h2><p><a href="https://nodejs.org/zh-cn/">下载｜ Node.js</a></p><img src="/post/816f8e7d/Node.js.jpg" alt="Node.js" style="zoom:80%;" loading="lazy"><p>建议下载长期支持版本。</p><p>同样，除了你想要更改的安装位置，其他默认即可。</p><p>然后，我们敲击键盘上的<code>win + R</code>键并输入cmd打开终端。(这里特指<code>win mac</code>太穷买不起)</p><p>在终端输入<code>npm -v</code> 回车,显示 版本号,否则就是安装失败,重头再来.(我没失败过,所以这里没有失败经验)</p><p>又输入<code>node -v</code>,同上.</p><p>如果两者都显示出版本号,则安装成功,我们进入下一步.</p><h2 id="注册你的Github账号"><a href="#注册你的Github账号" class="headerlink" title="注册你的Github账号"></a>注册你的Github账号</h2><blockquote><p>emmmm,应该都有GitHub账号吧,有的直接跳过进入下一步好了.(这里还是不写了,一般来说到大学了英文水平不至于这么差吧,再不然就用翻译工具吧.再不然互联网搜索注册方法….)</p></blockquote><p>登录 GitHub。</p><p>点击右上角的 <code>+</code> -&gt; <code>New repository</code> 新建仓库。</p><p>仓库名称务必为 <code>你的用户名.github.io</code>，用户名是英文，大小写无所谓，但建议统一小写。</p><p>点击 <code>Create repository</code>。</p><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><p>在终端中输入以下命令：</p><pre class="language-sh" data-language="sh"><code class="language-sh">npm install hexo-cli -g</code></pre><p>此时，请先通过 <code>cd</code> 进入你本地电脑打算存储网站代码的文件夹目录。（或者右键文件夹 Git Bash Here）,当然也可以手动进入,再文件夹里面右键Git Bush就好了.</p><p>接下来输入：</p><pre class="language-sh" data-language="sh"><code class="language-sh">hexo init 你的名字.github.io  #初始化</code></pre><pre class="language-sh" data-language="sh"><code class="language-sh"># 进入你的博客文件夹cd 你的名字.github.io# 默认安装所有 &#96;package.json&#96; 文件中提到的包npm install# 你也可以缩写成 hexo shexo server</code></pre><p><code>server</code> 代表开启本地的 Hexo 服务器，这时你就可以打开浏览器，在地址栏中输入 <code>localhost:4000</code> 就可以看到本地的网页了。</p><p>按 <code>Ctrl + C</code> 中断服务器的运行。</p><p>至此，基础的模版页面便已经搭建好了。</p><h2 id="使用-Hexo-主题"><a href="#使用-Hexo-主题" class="headerlink" title="使用 Hexo 主题"></a>使用 Hexo 主题</h2><p>Hexo 默认提供的是 <a href="https://github.com/hexojs/hexo-theme-landscape">hexo-theme-landscape</a> 主题。<br>默认主题样式简单，功能较少。所以大多数人并不会使用默认主题.</p><h2 id="下载-Hexo-主题"><a href="#下载-Hexo-主题" class="headerlink" title="下载 Hexo 主题"></a>下载 Hexo 主题</h2><p>在你储存博客的文件夹中右键Git bush,输入以下命令。</p><pre class="language-sh" data-language="sh"><code class="language-sh">git clone 你想要的主题地址</code></pre><h2 id="编辑-Hexo-配置"><a href="#编辑-Hexo-配置" class="headerlink" title="编辑 Hexo 配置"></a>编辑 Hexo 配置</h2><p>在你此前通过 Hexo 初始化生成的文件目录下，会存在一个 <code>_config.yml</code> 文件。</p><p>它是 Hexo 的配置文件，关于各配置选项的意义你可以查看 <a href="https://hexo.io/zh-cn/docs/configuration">配置 | Hexo</a>。</p><p>在 <code>_config.yml</code> 中找到 <code>theme</code> 这个字段，将其后的 <code>landscape</code> 修改为 <code>yun</code>。</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml">theme: 你下载的主题名字,可以在theme文件夹中看到</code></pre><p>这时再像此前那般使用 <code>hexo server</code> 重新启动服务器，你就可以看到一个不一样的主题风格的页面了。</p><p>至此,博客搭建初步完成.更多细节请自行百度或者等待我的下一次更新(咕咕…..).</p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于hexo的备份</title>
      <link href="/post/20c8899f/"/>
      <url>/post/20c8899f/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p>本篇主要是为了本人哪天电脑炸了博客恢复而记录的，如果给您带来了一定指示作用也是令人高兴的一件事，本篇可能部分材料有从他处摘抄，如果侵权(这里不提出从何处引用是因为网上相同内容的太多了，出处不可究)，麻烦联系我删除。谢谢！同时，我尽量写的清楚明白让看到的读者接受。</p><h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><p><strong>目的</strong>：针对博客已经搭建并发布过文章的或者是搭建未发布文章的。</p><p>1、在你的博客仓库（GitHub）创建一个分支Hexo（这个命名随意）；</p><p>2、设置Hexo为默认分支（default）（不知道怎么设的可以百度，建议自己摸索，弄明白GitHub的使用）；<strong>同时底部也给出了创建分支的方法</strong>。</p><p>3、将博客仓库clone至本地(<code>git clone git@github.com:XXXXX/XXXXX.github.io.git </code>) ，将之前的Hexo文件夹中的<br> <code>_config.yml</code>，<code>themes/</code>，<code>source</code>，<code>scffolds/</code>，<code>package.json</code>，<code>.gitignore</code>复制到你克隆下来的仓库文件夹，即Username.github.io；（Username是你自己的用户名）</p><p>4、将themes/next/中的<code>.git/</code>删除，否则无法将主题文件夹push；</p><p>5、在Username.github.io；文件夹执行<code>npm install</code>，<code>npm install hexo-deployer-git</code>(这里可以看看分支是不是显示为Hexo)</p><p><img src="/post/20c8899f/1.jpg" alt="1" loading="lazy"></p><p>6、执行<code>git add .</code>，<code>git commit -m &quot;提交文件&quot;</code>，<code>git push origin Hexo</code>来提交Hexo网站源文件；</p><blockquote><p><strong>注意</strong>：</p><p><img src="/post/20c8899f/2.jpg" alt="2" loading="lazy"></p></blockquote><p>7、执行hexo g -d 生成静态网页部署到github上。<br> 这样，<a href="https://links.jianshu.com/go?to=https://olivivian.github.io/">Username.github.io</a>仓库就有master分支保存静态网页，hexo分支保存源文件。</p><h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3><p>在本地对博客修改（包括修改主题样式、发布新文章等）后</p><p>1、执行<code>git add</code>，<code>git commit -m &quot;提交文件&quot;</code>，<code>git push origin Hexo</code>来提交Hexo网站源文件；</p><p>2、执行hexo g -d 生成静态网页部署到github上；<br> （每次发布重复这两步，它们之间没有严格的顺序）</p><h3 id="恢复"><a href="#恢复" class="headerlink" title="恢复"></a>恢复</h3><p>换电脑想改博客：<br> 1、安装git；<br> 2、安装Nodejs和npm；<br> 3、使用克隆命令将仓库拷贝至本地；<br> 4、在文件夹内执行命令<code>npm install hexo-cli -g</code>、<code>npm install</code>、<code>npm install hexo-deployer-git</code>；</p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>在github上直接创建分支的方法，直接输入新的分支名，回车即可。</p><p><img src="/post/20c8899f/3.jpg" alt="3" loading="lazy"></p><h3 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h3><p>这里稍作说明：</p><h5 id="添加ssh-keys"><a href="#添加ssh-keys" class="headerlink" title="添加ssh-keys"></a>添加ssh-keys</h5><ol><li>在终端下运行：<code>ssh-keygen -t rsa -C &quot;yourname@email.com&quot;</code>，一路回车；</li><li>会在.ssh目录生成<code>id_rsa</code>、<code>id_rsa.pub</code>两个文件，这就是密钥对，id_rsa是私钥，千万不能泄漏出去；</li><li>登录Github，打开「Settings」–&gt;「SSH and GPG keys」，然后点击「new SSH key」，填上任意Title，在Key文本框里粘贴公钥id_rsa.pub文件的内容，注意不要粘贴成<code>id_rsa</code>，最后点击「Add SSH Key」。</li></ol><h5 id="hexo的源文件"><a href="#hexo的源文件" class="headerlink" title="hexo的源文件"></a>hexo的源文件</h5><p>这里说一下步骤4为什么只需要拷贝6个，而不需要全部：</p><ol><li><code>_config.yml</code>站点的配置文件，需要拷贝；</li><li><code>themes/</code>主题文件夹，需要拷贝；</li><li><code>source</code>博客文章的.md文件，需要拷贝；</li><li><code>scaffolds/</code>文章的模板，需要拷贝；</li><li><code>package.json</code>安装包的名称，需要拷贝；</li><li><code>.gitignore</code>限定在push时哪些文件可以忽略，需要拷贝；</li><li><code>.git/</code>主题和站点都有，标志这是一个git项目，不需要拷贝；</li><li><code>node_modules/</code>是安装包的目录，在执行<code>npm install</code>的时候会重新生成，不需要拷贝；</li><li><code>public</code>是<code>hexo g</code>生成的静态网页，不需要拷贝；</li><li><code>.deploy_git</code>同上，<code>hexo g</code>也会生成，不需要拷贝；</li><li><code>db.json</code>文件，不需要拷贝。</li></ol><p>其实不需要拷贝的文件正是<code>.gitignore</code>中所忽略的。</p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于hexo博客插入图片显示问题</title>
      <link href="/post/8172e5bf/"/>
      <url>/post/8172e5bf/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h1 id="关于hexo博客插入图片显示问题"><a href="#关于hexo博客插入图片显示问题" class="headerlink" title="关于hexo博客插入图片显示问题"></a>关于hexo博客插入图片显示问题</h1><blockquote><p>踩坑日记，今天又学到新东西了。</p></blockquote><p>首先<br>1 把主页配置文件_config.yml 里的post_asset_folder:这个选项设置为true</p><p>2 在你的hexo目录下git bush <code>npm install hexo-asset-image --save</code>，下载安装一个可以上传本地图片的插件.</p><p>3 安装完后，再运行hexo n “xxxx”来生成md博文时，/source/_posts文件夹内除了xxxx.md文件还有一个同名的文件夹(也可以手动在该目录下添加，但是md文件的title什么的要自己添加)</p><p>然后<br>4 最后在xxxx.md中想引入图片时，先把图片复制到xxxx这个文件夹中，然后只需要在xxxx.md中按照markdown的格式引入图片：</p><p><code>![你想输入的替代文字](xxxx/图片名.jpg)</code></p><p>注意： xxxx是这个md文件的名字，也是同名文件夹的名字。只需要有文件夹名字即可，不需要有什么绝对路径。你想引入的图片就只需要放入xxxx这个文件夹内就好了，很像引用相对路径。</p><p>5 最后检查一下，hexo g生成页面后，进入public\2017\02\26\index.html文件中查看相关字段，可以发现，html标签内的语句是<code>&lt;img src=&quot;2017/02/26/xxxx/图片名.jpg&quot;&gt;</code>，而不是<code>&lt;img src=&quot;xxxx/图片名.jpg&gt;</code>。这很重要，关乎你的网页是否可以真正加载你想插入的图片。</p><p>做到这可能就出问题了，解决办法如下：</p><p>由于<code>hexo</code>默认无法自动处理文章插入本地图片，需要通过扩展插件支持。</p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>由于hexo 3 版本后对很多插件支持有问题，<a href="https://github.com/CodeFalling/hexo-asset-image.git">hexo-asset-image</a>插件在处理<code>data.permalink</code>链接时出现路径错误，把年月去掉了，导致最后生成的路径为<code>%d/xxx/xxx</code>需要对其做兼容处理。通过判断当前版本是否等于<code>3</code>的版本做不同的路径分割。</p><p>解决方法：(任意一种应该都能解决)</p><p><strong>1</strong>.可直接安装已经修改过得插件<code>npm install https://github.com/7ym0n/hexo-asset-image --sa</code>。</p><p><strong>2</strong>.找到node_modules 中的 hexo-asset-image，打开修改js文件，推荐跳到最后一行直接安装</p><p>在代码中加入：(推荐学习Ctrl + F 搜索快捷键快速定位)</p><pre class="language-JS" data-language="JS"><code class="language-JS">var version &#x3D; String(hexo.version).split(&#39;.&#39;);</code></pre><p>修改<code>date.permalink</code>处理：</p><p>（这一步可能是不需要的）</p><pre class="language-JS" data-language="JS"><code class="language-JS">var link &#x3D; data.permalink;  if(version.length &gt; 0 &amp;&amp; Number(version[0]) &#x3D;&#x3D; 3)     var beginPos &#x3D; getPosition(link, &#39;&#x2F;&#39;, 1) + 1; else     var beginPos &#x3D; getPosition(link, &#39;&#x2F;&#39;, 3) + 1;</code></pre><p>重新生成静态文件即可正确显示。</p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
